#!/bin/bash

# ============================================================================
# Mission Module - Gestion des missions et de leur cycle de vie
# ============================================================================

readonly DIFFICULTIES=("Easy" "Medium" "Hard")

# Th√®mes par activit√© et difficult√©
declare -A CVE_THEMES_EASY=(
  ["1"]="Analyser 1 CVE r√©cente (score CVSS < 7)"
  ["2"]="Documenter une vuln√©rabilit√© web basique"
  ["3"]="Rechercher des CVE dans un logiciel sp√©cifique"
)

declare -A CVE_THEMES_MEDIUM=(
  ["1"]="Analyser 2-3 CVE critiques (score CVSS > 7)"
  ["2"]="Cr√©er un rapport d√©taill√© d'une CVE avec POC"
  ["3"]="Comparer l'√©volution d'une famille de vuln√©rabilit√©s"
)

declare -A CVE_THEMES_HARD=(
  ["1"]="Analyser 3-5 CVE avec cha√Æne d'exploitation"
  ["2"]="R√©diger un guide de mitigation complet"
  ["3"]="Analyser l'impact d'une CVE sur plusieurs syst√®mes"
)

declare -A MALWARE_THEMES_EASY=(
  ["1"]="Analyse statique basique d'un malware connu"
  ["2"]="Identifier les IoC d'un √©chantillon simple"
  ["3"]="Documenter le comportement d'un adware"
)

declare -A MALWARE_THEMES_MEDIUM=(
  ["1"]="Reverse engineering d'un trojan"
  ["2"]="Analyse dynamique avec sandbox"
  ["3"]="D√©crypter la communication C&C"
)

declare -A MALWARE_THEMES_HARD=(
  ["1"]="Analyse compl√®te d'un APT sophistiqu√©"
  ["2"]="D√©sobfuscation et unpacking avanc√©"
  ["3"]="D√©velopper des signatures de d√©tection"
)

declare -A CTF_THEMES_EASY=(
  ["1"]="R√©soudre 3-5 challenges Web faciles"
  ["2"]="Challenges de cryptographie basique"
  ["3"]="Forensics sur des fichiers simples"
)

declare -A CTF_THEMES_MEDIUM=(
  ["1"]="R√©soudre 2-3 challenges de reverse engineering"
  ["2"]="Pwn de binaires avec protections basiques"
  ["3"]="St√©ganographie et forensics avanc√©s"
)

declare -A CTF_THEMES_HARD=(
  ["1"]="Exploitation de vuln√©rabilit√©s 0-day"
  ["2"]="Reverse engineering de malware obfusqu√©"
  ["3"]="Challenges de cryptanalyse avanc√©e"
)

declare -A VEILLE_THEMES_EASY=(
  ["1"]="R√©sum√© des actualit√©s cyber de la semaine"
  ["2"]="Analyser 3 nouvelles techniques d'attaque"
  ["3"]="Veille sur un secteur sp√©cifique (sant√©, finance...)"
)

declare -A VEILLE_THEMES_MEDIUM=(
  ["1"]="Rapport d√©taill√© sur une campagne APT r√©cente"
  ["2"]="Analyse des tendances cyber du mois"
  ["3"]="√âtude comparative d'outils de s√©curit√©"
)

declare -A VEILLE_THEMES_HARD=(
  ["1"]="Analyse g√©opolitique des cybermenaces"
  ["2"]="Pr√©dictions et prospective cybers√©curit√©"
  ["3"]="Rapport strat√©gique pour d√©cideurs"
)

# ============================================================================
# V√©rification de mission unique
# ============================================================================

mission_check_unique() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    local activity difficulty start_time duration
    activity=$(echo "$mission_data" | jq -r '.activity')
    difficulty=$(echo "$mission_data" | jq -r '.difficulty // "Unknown"')
    start_time=$(echo "$mission_data" | jq -r '.start_time')
    duration=$(echo "$mission_data" | jq -r '.duration')

    local current_time elapsed remaining
    current_time=$(date +%s)
    elapsed=$((current_time - start_time))
    remaining=$((duration - elapsed))

    ui_error "Mission d√©j√† en cours !"
    echo

    if [[ $remaining -gt 0 ]]; then
      local remaining_formatted
      remaining_formatted=$(format_time $remaining)
      ui_current_mission "$activity" "$difficulty" "$remaining_formatted"
    else
      ui_warning "‚è∞ Mission en cours (temps √©coul√©)"
      ui_current_mission "$activity" "$difficulty" "TEMPS √âCOUL√â"
    fi

    echo
    ui_info "Terminez d'abord votre mission actuelle avec 'Terminer la mission'"
    ui_info "Ou annulez-la avec 'Urgence'"

    return 1
  fi

  return 0
}

mission_check_unique_silent() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    return 1 # Mission en cours
  fi
  return 0 # Pas de mission
}

# ============================================================================
# G√©n√©ration de missions par type
# ============================================================================

mission_create() {
  local activity=$1

  # V√©rifier qu'aucune mission n'est en cours
  if ! mission_check_unique; then
    return 1
  fi

  case "$activity" in
  "Challenge TryHackMe")
    mission_create_tryhackme
    ;;
  "Documentation CVE")
    mission_create_themed "CVE" "Documentation CVE"
    ;;
  "Analyse de malware")
    mission_create_themed "MALWARE" "Analyse de malware"
    ;;
  "CTF Practice")
    mission_create_themed "CTF" "CTF Practice"
    ;;
  "Veille s√©curit√©")
    mission_create_themed "VEILLE" "Veille s√©curit√©"
    ;;
  *)
    ui_error "Type d'activit√© non support√©: $activity"
    return 1
    ;;
  esac
}

mission_create_tryhackme() {
  # Pour TryHackMe, syst√®me al√©atoire classique
  local difficulty
  difficulty=$(mission_get_random_difficulty)

  local duration
  duration=$(config_get_duration "$difficulty")

  local time_formatted
  time_formatted=$(format_time "$duration")

  echo
  ui_mission_box "Challenge TryHackMe" "$difficulty" "$time_formatted"
  echo

  local choice
  choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    "‚úÖ Accepter cette mission" \
    "üîÑ Reg√©n√©rer (al√©atoire)" \
    "‚ùå Retour au menu")

  case "$choice" in
  *"Accepter"*)
    mission_start "Challenge TryHackMe" "$difficulty" "$duration" ""
    ;;
  *"Reg√©n√©rer"*)
    ui_info "Nouvelle mission g√©n√©r√©e..."
    sleep 1
    # CORRECTION: revenir au menu de choix, pas auto-accepter
    mission_create_tryhackme
    ;;
  *"Retour"*)
    return 0
    ;;
  esac
}

# ============================================================================
# Fonctions utilitaires manquantes
# ============================================================================

mission_get_random_difficulty() {
  local random_index=$((RANDOM % ${#DIFFICULTIES[@]}))
  echo "${DIFFICULTIES[$random_index]}"
}

mission_get_random_theme() {
  local theme_type=$1
  local difficulty=$2

  local -n themes_ref="${theme_type}_THEMES_${difficulty^^}"
  local theme_keys=(${!themes_ref[@]})
  local random_key=${theme_keys[$((RANDOM % ${#theme_keys[@]}))]}

  echo "${themes_ref[$random_key]}"
}

mission_check_unique_silent() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    return 1
  fi
  return 0
}

mission_show_theme_choice() {
  local theme_type=$1
  local activity_name=$2
  local diff_level=$3

  # Obtenir un th√®me al√©atoire
  local theme
  theme=$(mission_get_random_theme "$theme_type" "$diff_level")

  local duration
  duration=$(config_get_duration "$diff_level")

  local time_formatted
  time_formatted=$(format_time "$duration")

  echo
  ui_themed_mission_box "$activity_name" "$diff_level" "$time_formatted" "$theme"
  echo

  local choice
  choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    "‚úÖ Accepter cette mission" \
    "üîÑ Nouveau th√®me (m√™me difficult√©)" \
    "üîÑ Changer de difficult√©" \
    "‚ùå Retour au menu")

  case "$choice" in
  *"Accepter"*)
    mission_start "$activity_name" "$diff_level" "$duration" "$theme"
    ;;
  *"Nouveau th√®me"*)
    ui_info "Nouveau th√®me g√©n√©r√©..."
    sleep 1
    # CORRECTION: revenir au menu de choix avec nouveau th√®me
    mission_show_theme_choice "$theme_type" "$activity_name" "$diff_level"
    ;;
  *"Changer de difficult√©"*)
    mission_create_themed "$theme_type" "$activity_name"
    ;;
  *"Retour"*)
    return 0
    ;;
  esac
}

mission_create_themed() {
  local theme_type=$1
  local activity_name=$2

  echo
  echo -e "${CYAN}Choisissez la difficult√© pour $activity_name :${NC}"
  echo

  local difficulty
  difficulty=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    "Easy (2h)" \
    "Medium (3h)" \
    "Hard (4h)" \
    "‚Ü©Ô∏è Retour au menu challenges")

  # G√©rer le retour
  if [[ "$difficulty" == *"Retour"* ]]; then
    return 0
  fi

  # Extraire la difficult√©
  local diff_level
  case "$difficulty" in
  "Easy (2h)") diff_level="Easy" ;;
  "Medium (3h)") diff_level="Medium" ;;
  "Hard (4h)") diff_level="Hard" ;;
  *)
    ui_error "Difficult√© non reconnue"
    return 1
    ;;
  esac

  # Fonction pour afficher et choisir le th√®me
  mission_show_theme_choice "$theme_type" "$activity_name" "$diff_level"
}

mission_get_random_theme() {
  local theme_type=$1
  local difficulty=$2

  local -n themes_ref="${theme_type}_THEMES_${difficulty^^}"
  local theme_keys=(${!themes_ref[@]})
  local random_key=${theme_keys[$((RANDOM % ${#theme_keys[@]}))]}

  echo "${themes_ref[$random_key]}"
}

# ============================================================================
# D√©marrage des missions
# ============================================================================

mission_start() {
  local activity=$1
  local difficulty=$2
  local duration=$3
  local theme=${4:-""}

  # Sauvegarder la mission avec le th√®me
  config_save_mission "$activity" "$difficulty" "$duration" "$theme"

  # Lancer le timer
  timer_start "$duration"

  # Affichage de confirmation
  ui_clear
  ui_header "Mission Lanc√©e"

  local time_formatted
  time_formatted=$(format_time "$duration")

  if [[ -n "$theme" ]]; then
    ui_box "üöÄ MISSION ACTIVE AVEC TH√àME" \
      "üìã $activity|‚ö° Difficult√©: $difficulty|‚è∞ Temps: $time_formatted||üéØ Th√®me: $theme||üí™ Bon travail !" \
      "#00FF00"
  else
    ui_box "üöÄ MISSION ACTIVE" \
      "üìã $activity|‚ö° Difficult√©: $difficulty|‚è∞ Temps: $time_formatted||üí™ Bon travail !" \
      "#00FF00"
  fi

  echo
  ui_success "Mission d√©marr√©e ! Timer en cours d'ex√©cution."
  ui_info "Revenez au menu principal pour suivre votre progression."

  ui_wait
}

# ============================================================================
# Affichage des missions
# ============================================================================

mission_display_current() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" == "null" ]] || [[ -z "$mission_data" ]]; then
    return 0
  fi

  local activity difficulty start_time duration status theme
  activity=$(echo "$mission_data" | jq -r '.activity')
  difficulty=$(echo "$mission_data" | jq -r '.difficulty')
  start_time=$(echo "$mission_data" | jq -r '.start_time')
  duration=$(echo "$mission_data" | jq -r '.duration')
  status=$(echo "$mission_data" | jq -r '.status // "active"')
  theme=$(echo "$mission_data" | jq -r '.theme // ""')

  if [[ "$status" == "active" ]]; then
    local current_time elapsed remaining
    current_time=$(date +%s)
    elapsed=$((current_time - start_time))
    remaining=$((duration - elapsed))

    if [[ $remaining -gt 0 ]]; then
      local remaining_formatted
      remaining_formatted=$(format_time $remaining)

      if [[ -n "$theme" && "$theme" != "null" ]]; then
        ui_current_mission_with_theme "$activity" "$difficulty" "$remaining_formatted" "$theme"
      else
        ui_current_mission "$activity" "$difficulty" "$remaining_formatted"
      fi
    else
      ui_warning "‚è∞ Temps √©coul√© ! Mission en attente de validation."
      echo
    fi
  fi
}

# ============================================================================
# Validation et compl√©tion avec navigation am√©lior√©e
# ============================================================================

mission_validate() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" == "null" ]] || [[ -z "$mission_data" ]]; then
    ui_error "Aucune mission active √† valider"
    ui_wait
    return 1
  fi

  local activity difficulty start_time duration theme
  activity=$(echo "$mission_data" | jq -r '.activity')
  difficulty=$(echo "$mission_data" | jq -r '.difficulty')
  start_time=$(echo "$mission_data" | jq -r '.start_time')
  duration=$(echo "$mission_data" | jq -r '.duration')
  theme=$(echo "$mission_data" | jq -r '.theme // ""')

  local current_time elapsed remaining
  current_time=$(date +%s)
  elapsed=$((current_time - start_time))
  remaining=$((duration - elapsed))

  ui_header "Validation de Mission"

  local validation_content="Activit√©: $activity|Difficult√©: $difficulty|Temps √©coul√©: $(format_time $elapsed)"
  if [[ -n "$theme" && "$theme" != "null" ]]; then
    validation_content+="|Th√®me: $theme"
  fi

  # Affichage avec statut selon le temps
  if [[ $remaining -le 0 ]]; then
    ui_box "‚è∞ MISSION EN RETARD" "$validation_content|Temps imparti: D√âPASS√â de $(format_time $((elapsed - duration)))" "#FF0000"
  else
    ui_box "üìã MISSION √Ä VALIDER" "$validation_content|Temps restant: $(format_time $remaining)" "#FFA500"
  fi

  echo

  # Menu de validation avec avertissement si en retard
  local validation_options=()
  
  if [[ $remaining -le 0 ]]; then
    validation_options+=("‚úÖ Mission termin√©e avec succ√®s (malgr√© le retard)")
    validation_options+=("‚ùå Mission √©chou√©e/non termin√©e + P√âNALIT√â")
  else
    validation_options+=("‚úÖ Mission termin√©e avec succ√®s")
    validation_options+=("‚ùå Mission √©chou√©e/non termin√©e + P√âNALIT√â")
  fi
  
  validation_options+=("‚Ü©Ô∏è Retour au menu principal (sans valider)")

  local validation_choice
  validation_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    "${validation_options[@]}")

  case "$validation_choice" in
    *"termin√©e avec succ√®s"*)
      mission_complete_success "$activity" "$difficulty" $elapsed $remaining
      ;;
    *"√©chou√©e/non termin√©e"*)
      mission_complete_failure "$activity" "$difficulty" true
      ;;
    *"Retour"*)
      ui_info "Validation annul√©e. Mission toujours active."
      return 0
      ;;
  esac
}

mission_complete_success() {
  local activity=$1
  local difficulty=$2
  local elapsed=$3
  local remaining=${4:-0}

  # Marquer comme compl√©t√©e
  config_complete_mission

  # Mettre √† jour les statistiques
  stats_record_completion "$activity" true "$difficulty"

  # Nettoyer
  config_clear_mission

  # Afficher le succ√®s
  if [[ $remaining -le 0 ]]; then
    ui_warning "‚ö†Ô∏è Mission termin√©e en retard mais valid√©e comme succ√®s"
    ui_box "‚úÖ SUCC√àS (EN RETARD)" \
      "Mission: $activity|Difficult√©: $difficulty|Temps: $(format_time $elapsed)|Retard: $(format_time $((-remaining)))||üéØ Mission valid√©e malgr√© le d√©passement" \
      "#FFA500"
  else
    local time_saved=$((remaining))
    local time_saved_str=""
    if [[ $time_saved -gt 0 ]]; then
      time_saved_str=" ($(format_time $time_saved) d'avance !)"
    fi

    ui_success "üéâ Mission termin√©e avec succ√®s !"
    ui_box "‚úÖ SUCC√àS" \
      "Mission: $activity|Difficult√©: $difficulty|Temps: $(format_time $elapsed)$time_saved_str||üèÜ Excellent travail !" \
      "#00FF00"
  fi

  ui_wait
}


mission_complete_failure() {
  local activity=$1
  local difficulty=$2
  local force_penalty=${3:-false}

  # Marquer comme √©chou√©e
  config_fail_mission

  # Mettre √† jour les statistiques
  stats_record_completion "$activity" false "$difficulty"

  # Nettoyer la mission
  config_clear_mission

  # TOUJOURS afficher l'avertissement de p√©nalit√©
  ui_error "üíÄ MISSION √âCHOU√âE - APPLICATION DE P√âNALIT√â"
  
  ui_box "üíÄ √âCHEC CONFIRM√â" \
    "Mission: $activity ($difficulty)|Statut: √âCHOU√âE|Cons√©quence: P√©nalit√© IMM√âDIATE||‚ö° Application en cours..." \
    "#FF0000"

  echo
  ui_warning "Une p√©nalit√© va √™tre appliqu√©e dans 3 secondes..."
  sleep 3

  # Appliquer une p√©nalit√© (TOUJOURS)
  punishment_apply_random

  ui_wait
}

mission_emergency_cancel() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" == "null" ]] || [[ -z "$mission_data" ]]; then
    ui_error "Aucune mission active √† annuler"
    return 1
  fi

  ui_warning "üö® ANNULATION D'URGENCE"
  ui_warning "Cette action stoppera imm√©diatement la mission actuelle."
  echo

  if ui_confirm "√ätes-vous s√ªr ? Cette action ne peut pas √™tre annul√©e."; then
    config_clear_mission
    ui_success "Mission annul√©e en urgence."
    ui_info "Aucune p√©nalit√© appliqu√©e pour cette annulation d'urgence."
  else
    ui_info "Annulation d'urgence annul√©e."
  fi
}

# ============================================================================
# NOUVEAU : Menu d'urgence avec jokers
# ============================================================================
show_emergency_menu() {
  ui_header "üö® MODE URGENCE"

  local jokers_available jokers_total
  jokers_available=$(config_get_jokers_available)
  jokers_total=$(config_get_jokers_total)

  ui_info "üÉè Jokers de sauvetage disponibles: $jokers_available/$jokers_total"
  echo

  local mission_data
  mission_data=$(config_get_current_mission)

  local emergency_options=()

  # Options selon l'√©tat
  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    if [[ $jokers_available -gt 0 ]]; then
      emergency_options+=("üÉè Utiliser un joker - Annuler mission SANS p√©nalit√©")
    fi
    emergency_options+=("üíÄ Abandonner mission AVEC p√©nalit√©s")
  fi

  # V√©rifier p√©nalit√©s actives
  if punishment_has_active_punishments; then
    if [[ $jokers_available -gt 0 ]]; then
      emergency_options+=("üÉè Utiliser un joker - Annuler toutes les p√©nalit√©s")
    fi
    emergency_options+=("üìã Voir les p√©nalit√©s en cours")
  fi

  # Options toujours disponibles
  emergency_options+=("üîß R√©initialisation compl√®te du syst√®me")
  emergency_options+=("üìä Diagnostic syst√®me")
  emergency_options+=("‚Ü©Ô∏è Retour au menu principal")

  # Afficher info sur les jokers
  if [[ $jokers_available -eq 0 ]]; then
    ui_warning "‚ö†Ô∏è Plus de jokers ! Abandon = p√©nalit√©s garanties"
    echo
  fi

  local emergency_choice
  emergency_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#ff0000" \
    --cursor.foreground="#ff0000" \
    "${emergency_options[@]}")

  case "$emergency_choice" in
  *"Annuler mission SANS p√©nalit√©"*)
    emergency_cancel_mission_with_joker
    ;;
  *"Annuler toutes les p√©nalit√©s"*)
    emergency_cancel_punishments_with_joker
    ;;
  *"Abandonner mission AVEC p√©nalit√©s"*)
    emergency_force_cancel_mission
    ;;
  *"Voir les p√©nalit√©s"*)
    punishment_list_active
    ui_wait
    ;;
  *"R√©initialisation compl√®te"*)
    emergency_full_reset
    ;;
  *"Diagnostic syst√®me"*)
    emergency_system_status
    ;;
  *"Retour"*)
    return
    ;;
  esac

  echo
  ui_wait
}

emergency_cancel_mission_with_joker() {
  ui_warning "üÉè UTILISATION D'UN JOKER DE SAUVETAGE"
  ui_info "Cette action va annuler votre mission actuelle SANS appliquer de p√©nalit√©."
  echo

  local jokers_remaining
  jokers_remaining=$(($(config_get_jokers_available) - 1))

  ui_warning "Jokers restants apr√®s cette action: $jokers_remaining/3"
  echo

  if ui_confirm "Utiliser un joker pour annuler la mission sans p√©nalit√© ?"; then
    config_use_joker
    config_clear_mission

    ui_success "üéâ Mission annul√©e sans p√©nalit√© gr√¢ce au joker !"
    ui_info "Votre joker a √©t√© consomm√©. Jokers restants: $jokers_remaining/3"
  else
    ui_info "Joker non utilis√©."
  fi
}

emergency_cancel_punishments_with_joker() {
  ui_warning "üÉè UTILISATION D'UN JOKER DE SAUVETAGE"
  ui_info "Cette action va annuler TOUTES les p√©nalit√©s en cours."
  echo

  punishment_list_active
  echo

  local jokers_remaining
  jokers_remaining=$(($(config_get_jokers_available) - 1))

  ui_warning "Jokers restants apr√®s cette action: $jokers_remaining/3"
  echo

  if ui_confirm "Utiliser un joker pour annuler toutes les p√©nalit√©s ?"; then
    config_use_joker
    punishment_emergency_stop

    ui_success "üéâ Toutes les p√©nalit√©s ont √©t√© annul√©es gr√¢ce au joker !"
    ui_info "Votre joker a √©t√© consomm√©. Jokers restants: $jokers_remaining/3"
  else
    ui_info "Joker non utilis√©."
  fi
}

emergency_force_cancel_mission() {
  ui_error "üõë ABANDON DE MISSION SANS JOKER"
  ui_warning "Cette action va appliquer les p√©nalit√©s d'√©chec de mission."
  echo

  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    local activity difficulty
    activity=$(echo "$mission_data" | jq -r '.activity')
    difficulty=$(echo "$mission_data" | jq -r '.difficulty')

    ui_box "üíÄ CONS√âQUENCES DE L'ABANDON" \
      "Mission: $activity ($difficulty)|Status: Sera marqu√©e comme √©chou√©e|P√©nalit√©: Application d'une p√©nalit√© al√©atoire|Dur√©e: 30-60 minutes selon le type||Types possibles:|üîí Verrouillage d'√©cran|üåê Restriction r√©seau|üö´ Blocage de sites|üñºÔ∏è Wallpaper motivationnel|üì¢ Notifications de rappel|üñ±Ô∏è R√©duction sensibilit√© souris" \
      "#FF0000"

    echo
    ui_warning "‚ö†Ô∏è DERNI√àRE CHANCE: Vous pouvez retourner √† votre mission !"
    echo
  fi

  local final_choice
  final_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#ff0000" \
    "üíÄ Confirmer l'abandon AVEC p√©nalit√©s" \
    "‚Ü©Ô∏è Retourner √† ma mission (annuler abandon)")

  case "$final_choice" in
  *"Confirmer l'abandon"*)
    if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
      local activity difficulty
      activity=$(echo "$mission_data" | jq -r '.activity')
      difficulty=$(echo "$mission_data" | jq -r '.difficulty')

      # Marquer comme √©chou√©e et appliquer p√©nalit√©s
      config_fail_mission
      stats_record_completion "$activity" false "$difficulty"
      config_clear_mission

      ui_error "Mission abandonn√©e et marqu√©e comme √©chou√©e."

      # Appliquer la p√©nalit√©
      punishment_apply_random
    fi
    ;;
  *"Retourner"*)
    ui_success "Sage d√©cision ! Retournez terminer votre mission."
    ;;
  esac
}

# ============================================================================
# Fonction utilitaire pour v√©rifier les p√©nalit√©s actives
# ============================================================================

punishment_has_active_punishments() {
  # V√©rifier s'il y a des p√©nalit√©s en cours
  if [[ -f "$CONFIG_DIR/network_restricted.txt" ]] ||
    [[ -f "$CONFIG_DIR/wallpaper_backup.info" ]] ||
    pgrep -f "punishment.*notification_spam" &>/dev/null; then
    return 0 # Il y a des p√©nalit√©s
  else
    return 1 # Pas de p√©nalit√©s
  fi
}
