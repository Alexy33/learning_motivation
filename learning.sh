#!/bin/bash

# ============================================================================
# Learning Challenge Manager
# A gamified task management system for cybersecurity training
# ============================================================================

set -euo pipefail

# Configuration globale
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly CONFIG_DIR="$HOME/.learning_challenge"
readonly LIB_DIR="$SCRIPT_DIR/lib"
readonly BIN_DIR="$SCRIPT_DIR/bin"

# Import des modules
source "$LIB_DIR/config.sh"
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/mission.sh"
source "$LIB_DIR/stats.sh"
source "$LIB_DIR/timer.sh"
source "$LIB_DIR/punishment.sh"

# ============================================================================
# Fonctions principales
# ============================================================================

check_dependencies() {
  local missing_deps=()

  for dep in gum jq bc; do
    if ! command -v "$dep" &>/dev/null; then
      missing_deps+=("$dep")
    fi
  done

  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    ui_error "D√©pendances manquantes: ${missing_deps[*]}"
    ui_info "Installation: sudo pacman -S ${missing_deps[*]}"
    exit 1
  fi
}

show_main_menu() {
  echo
  echo -e "${CYAN}S√©lectionnez votre activit√© :${NC}"
  echo

  gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    --cursor.foreground="#0099ff" \
    "üî• Challenge TryHackMe" \
    "üìö Documentation CVE" \
    "ü¶† Analyse de malware" \
    "üè¥‚Äç‚ò†Ô∏è CTF Practice" \
    "üîç Veille s√©curit√©" \
    "üìä Statistiques" \
    "‚öôÔ∏è  Configuration" \
    "üö™ Quitter"
}

handle_menu_choice() {
  local choice="$1"

  # Version plus tol√©rante - utilise des patterns
  case "$choice" in
  *"Challenge TryHackMe"*)
    echo "TryHackMe s√©lectionn√© !"
    mission_create "Challenge TryHackMe"
    ;;
  *"Documentation CVE"*)
    echo "CVE s√©lectionn√© !"
    mission_create "Documentation CVE"
    ;;
  *"Analyse de malware"*)
    echo "Malware s√©lectionn√© !"
    mission_create "Analyse de malware"
    ;;
  *"CTF Practice"*)
    echo "CTF s√©lectionn√© !"
    mission_create "CTF Practice"
    ;;
  *"Veille s√©curit√©"*)
    echo "Veille s√©lectionn√©e !"
    mission_create "Veille s√©curit√©"
    ;;
  *"Statistiques"*)
    stats_display
    ;;
  *"Configuration"*)
    show_config_menu
    ;;
  *"Quitter"*)
    ui_success "Session termin√©e"
    exit 0
    ;;
  *)
    echo "DEBUG: Choix non reconnu: '$choice'"
    echo "DEBUG: Longueur: ${#choice} caract√®res"
    printf "DEBUG: Hex dump: "
    printf '%s' "$choice" | xxd -p
    echo
    ;;
  esac
}

show_config_menu() {
  ui_header "Configuration"

  local config_choice
  config_choice=$(gum choose \
    "üéØ Modifier les dur√©es par difficult√©" \
    "üîÑ R√©initialiser les statistiques" \
    "üóÇÔ∏è  Voir les fichiers de configuration" \
    "‚Ü©Ô∏è  Retour au menu principal")

  case "$config_choice" in
  "üéØ Modifier les dur√©es par difficult√©")
    config_modify_durations
    ;;
  "üîÑ R√©initialiser les statistiques")
    if gum confirm "√ätes-vous s√ªr de vouloir r√©initialiser toutes les statistiques ?"; then
      stats_reset
      ui_success "Statistiques r√©initialis√©es"
    fi
    ;;
  "üóÇÔ∏è  Voir les fichiers de configuration")
    ui_info "Dossier de configuration : $CONFIG_DIR"
    gum input --placeholder "Appuyez sur Entr√©e pour continuer..." >/dev/null
    ;;
  esac
}

main_loop() {
  while true; do
    ui_header "Learning Challenge Manager"

    # Afficher la mission en cours si elle existe
    mission_display_current

    # Obtenir le choix de l'utilisateur
    local choice
    if ! choice=$(show_main_menu); then
      ui_warning "S√©lection annul√©e"
      continue
    fi

    # Traiter le choix
    handle_menu_choice "$choice"

    echo
    sleep 0.5
  done
}

# ============================================================================
# Point d'entr√©e principal
# ============================================================================

main() {
  # V√©rifications pr√©liminaires
  check_dependencies
  config_init

  # Cr√©er les dossiers n√©cessaires
  mkdir -p "$CONFIG_DIR" "$BIN_DIR"

  # Message de bienvenue
  echo
  ui_success "Learning Challenge Manager initialis√©"
  echo

  # D√©marrer la boucle principale
  main_loop
}

# Gestion des signaux
trap 'echo; ui_warning "Interruption d√©tect√©e. Session ferm√©e."; exit 130' INT TERM

# Lancer le programme
main "$@"
