#!/bin/bash

# ============================================================================
# Learning Challenge Manager
# A gamified task management system for cybersecurity training
# ============================================================================

set -euo pipefail

# Configuration globale
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly CONFIG_DIR="$HOME/.learning_challenge"
readonly LIB_DIR="$SCRIPT_DIR/lib"
readonly BIN_DIR="$SCRIPT_DIR/bin"

# Import des modules
source "$LIB_DIR/config.sh"
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/mission.sh"
source "$LIB_DIR/stats.sh"
source "$LIB_DIR/timer.sh"
source "$LIB_DIR/punishment.sh"
source "$LIB_DIR/admin.sh"

# ============================================================================
# Fonctions principales
# ============================================================================

check_dependencies() {
  local missing_deps=()

  for dep in gum jq bc; do
    if ! command -v "$dep" &>/dev/null; then
      missing_deps+=("$dep")
    fi
  done

  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    ui_error "D√©pendances manquantes: ${missing_deps[*]}"
    ui_info "Installation: sudo pacman -S ${missing_deps[*]}"
    exit 1
  fi
}

# ============================================================================
# Menu principal unifi√©
# ============================================================================
show_main_menu() {
  local mission_data
  mission_data=$(config_get_current_mission)

  # Afficher les jokers de sauvetage avec plus d'infos
  local jokers_available
  jokers_available=$(config_get_jokers_available)

  # Options de base
  local menu_options=("üéØ Challenges" "üìä Statistiques" "‚öôÔ∏è Param√®tres" "üö™ Quitter")

  # Si mission en cours, ajouter les options li√©es
  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    local activity difficulty start_time duration
    activity=$(echo "$mission_data" | jq -r '.activity')
    difficulty=$(echo "$mission_data" | jq -r '.difficulty')
    start_time=$(echo "$mission_data" | jq -r '.start_time')
    duration=$(echo "$mission_data" | jq -r '.duration')

    local current_time elapsed remaining
    current_time=$(date +%s)
    elapsed=$((current_time - start_time))
    remaining=$((duration - elapsed))

    # Ins√©rer les options mission au d√©but
    if [[ $remaining -gt 0 ]]; then
      local remaining_formatted
      remaining_formatted=$(format_time $remaining)
      menu_options=("üìã Mission en cours ($remaining_formatted)" "‚úÖ Terminer la mission" "üö® Urgence & Jokers" "üíÄ Peine encourue" "${menu_options[@]}")
    else
      menu_options=("üìã Mission en cours (TEMPS √âCOUL√â)" "‚úÖ Terminer la mission" "üö® Urgence & Jokers" "üíÄ Peine encourue" "${menu_options[@]}")
    fi
  else
    # M√™me sans mission, garder l'acc√®s aux jokers pour annuler p√©nalit√©s
    if punishment_has_active_punishments &>/dev/null; then
      menu_options=("üö® Urgence & Jokers" "${menu_options[@]}")
    fi
  fi

  echo
  echo -e "${CYAN}Menu Principal - Learning Challenge Manager${NC}"

  # Affichage am√©lior√© des jokers (CORRECTION: utiliser la constante)
  if [[ $jokers_available -gt 0 ]]; then
    echo -e "${GREEN}üÉè Jokers de sauvetage: $jokers_available/$JOKERS_PER_DAY disponibles${NC}"
    echo -e "${BLUE}üí° Annulez missions/p√©nalit√©s sans cons√©quences${NC}"
  else
    echo -e "${RED}üÉè Jokers de sauvetage: $jokers_available/$JOKERS_PER_DAY (√©puis√©s)${NC}"
    echo -e "${YELLOW}‚è∞ Rechargement automatique demain${NC}"
  fi
  echo

  # Utiliser gum pour afficher le menu
  gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    --cursor.foreground="#0099ff" \
    "${menu_options[@]}"
}

handle_main_menu() {
  local choice="$1"

  case "$choice" in
    *"Mission en cours"*)
      show_current_mission_details
      ;;
    *"Terminer la mission"*)
      mission_validate
      ;;
    *"Urgence & Jokers"*)
      show_emergency_menu
      ;;
    *"Peine encourue"*)
      show_punishment_info
      ;;
    *"Challenges"*)
      show_challenges_menu
      ;;
    *"Statistiques"*)
      stats_display
      ;;
    *"Param√®tres"*)
      show_settings_menu
      ;;
    *"Quitter"*)
      ui_success "Au revoir ! Session ferm√©e."
      exit 0
      ;;
    *)
      ui_warning "Option non reconnue"
      ;;
  esac
}

# ============================================================================
# Menu des challenges
# ============================================================================

show_challenges_menu() {
  ui_header "S√©lection des Challenges"

  # V√©rifier s'il y a d√©j√† une mission
  if ! mission_check_unique_silent; then
    echo
    ui_error "Une mission est d√©j√† en cours !"
    ui_info "Terminez d'abord votre mission actuelle."
    echo
    ui_wait
    return
  fi

  echo
  echo -e "${CYAN}Choisissez votre type de challenge :${NC}"
  echo

  local challenge_choice
  challenge_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    --cursor.foreground="#0099ff" \
    "üî• Challenge TryHackMe" \
    "üìö Documentation CVE" \
    "ü¶† Analyse de malware" \
    "üè¥‚Äç‚ò†Ô∏è CTF Practice" \
    "üì∞ Veille s√©curit√©" \
    "‚Ü©Ô∏è Retour au menu principal")

  case "$challenge_choice" in
  *"Challenge TryHackMe"*)
    mission_create "Challenge TryHackMe"
    ;;
  *"Documentation CVE"*)
    mission_create "Documentation CVE"
    ;;
  *"Analyse de malware"*)
    mission_create "Analyse de malware"
    ;;
  *"CTF Practice"*)
    mission_create "CTF Practice"
    ;;
  *"Veille s√©curit√©"*)
    mission_create "Veille s√©curit√©"
    ;;
  *"Retour"*)
    return
    ;;
  esac
}

# ============================================================================
# D√©tails de la mission en cours
# ============================================================================

show_current_mission_details() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" == "null" ]] || [[ -z "$mission_data" ]]; then
    ui_error "Aucune mission en cours"
    ui_wait
    return
  fi

  ui_header "Mission en Cours"

  local activity difficulty start_time duration theme
  activity=$(echo "$mission_data" | jq -r '.activity')
  difficulty=$(echo "$mission_data" | jq -r '.difficulty')
  start_time=$(echo "$mission_data" | jq -r '.start_time')
  duration=$(echo "$mission_data" | jq -r '.duration')
  theme=$(echo "$mission_data" | jq -r '.theme // ""')

  local current_time elapsed remaining
  current_time=$(date +%s)
  elapsed=$((current_time - start_time))
  remaining=$((duration - elapsed))

  local status_color="#4A90E2"
  local status_text="EN COURS"

  if [[ $remaining -le 0 ]]; then
    status_color="#FF6B6B"
    status_text="TEMPS √âCOUL√â"
    remaining=0
  elif [[ $remaining -le 300 ]]; then
    status_color="#FFA500"
    status_text="URGENT"
  fi

  local elapsed_formatted remaining_formatted duration_formatted
  elapsed_formatted=$(format_time $elapsed)
  remaining_formatted=$(format_time $remaining)
  duration_formatted=$(format_time $duration)

  local percentage
  if [[ $duration -gt 0 ]]; then
    percentage=$((elapsed * 100 / duration))
    if [[ $percentage -gt 100 ]]; then
      percentage=100
    fi
  else
    percentage=0
  fi

  # Construire le contenu
  local content="üéØ Activit√©: $activity|‚ö° Difficult√©: $difficulty|‚è∞ Temps total: $duration_formatted|‚åõ Temps √©coul√©: $elapsed_formatted|‚è≥ Temps restant: $remaining_formatted|üìä Progression: $percentage%"

  if [[ -n "$theme" && "$theme" != "null" ]]; then
    content+="|üé® Th√®me: $theme"
  fi

  ui_box "üìã MISSION ACTIVE: $status_text" "$content" "$status_color"

  echo
  ui_progress_bar $elapsed $duration "Avancement"
  echo

  if [[ $remaining -le 0 ]]; then
    ui_warning "‚ö†Ô∏è Le temps imparti est √©coul√© !"
    ui_info "Utilisez 'Terminer la mission' pour valider."
  elif [[ $remaining -le 300 ]]; then
    ui_warning "‚ö†Ô∏è Plus que 5 minutes ! D√©p√™chez-vous !"
  fi

  echo
  ui_wait
}

# ============================================================================
# Menu d'urgence
# ============================================================================
show_emergency_menu() {
  ui_header "üö® MODE URGENCE"

  local jokers_available
  jokers_available=$(config_get_jokers_available)

  ui_info "üÉè Jokers de sauvetage disponibles: $jokers_available/$JOKERS_PER_DAY"
  ui_warning "‚ö° Les jokers permettent d'annuler missions/p√©nalit√©s SANS cons√©quences"
  echo

  local mission_data
  mission_data=$(config_get_current_mission)

  local emergency_options=()

  # Options selon l'√©tat
  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    if [[ $jokers_available -gt 0 ]]; then
      emergency_options+=("üÉè Utiliser un joker - Annuler mission SANS p√©nalit√©")
    fi
    emergency_options+=("üíÄ Abandonner mission AVEC p√©nalit√©s")
  fi

  # V√©rifier p√©nalit√©s actives
  if punishment_has_active_punishments; then
    if [[ $jokers_available -gt 0 ]]; then
      emergency_options+=("üÉè Utiliser un joker - Annuler toutes les p√©nalit√©s")
    fi
    emergency_options+=("üìã Voir les p√©nalit√©s en cours")
  fi

  # Options toujours disponibles
  emergency_options+=("üîß R√©initialisation compl√®te du syst√®me")
  emergency_options+=("üìä Diagnostic syst√®me")
  emergency_options+=("‚Ü©Ô∏è Retour au menu principal")

  # Afficher info sur les jokers selon la situation
  if [[ $jokers_available -eq 0 ]]; then
    ui_warning "‚ö†Ô∏è Plus de jokers ! Abandon = p√©nalit√©s garanties"
    ui_info "üí° Les jokers se rechargent chaque jour (3 par jour)"
    echo
  else
    ui_info "üí° Utilisez vos jokers sagement - ils se rechargent quotidiennement"
    echo
  fi

  local emergency_choice
  emergency_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#ff0000" \
    --cursor.foreground="#ff0000" \
    "${emergency_options[@]}")

  case "$emergency_choice" in
  *"Annuler mission SANS p√©nalit√©"*)
    emergency_cancel_mission_with_joker
    ;;
  *"Annuler toutes les p√©nalit√©s"*)
    emergency_cancel_punishments_with_joker
    ;;
  *"Abandonner mission AVEC p√©nalit√©s"*)
    emergency_force_cancel_mission
    ;;
  *"Voir les p√©nalit√©s"*)
    punishment_list_active
    ui_wait
    ;;
  *"R√©initialisation compl√®te"*)
    emergency_full_reset_with_confirmation
    ;;
  *"Diagnostic syst√®me"*)
    emergency_system_status
    ;;
  *"Retour"*)
    return
    ;;
  esac

  echo
  ui_wait
}

emergency_cancel_mission_with_joker() {
  ui_warning "üÉè UTILISATION D'UN JOKER DE SAUVETAGE"
  ui_info "Cette action va annuler votre mission actuelle SANS appliquer de p√©nalit√©."
  echo

  local jokers_remaining
  jokers_remaining=$(($(config_get_jokers_available) - 1))

  ui_warning "Jokers restants apr√®s cette action: $jokers_remaining/$JOKERS_PER_DAY"
  echo

  if ui_confirm "Utiliser un joker pour annuler la mission sans p√©nalit√© ?"; then
    config_use_joker
    config_clear_mission

    ui_success "üéâ Mission annul√©e sans p√©nalit√© gr√¢ce au joker !"
    ui_info "Votre joker a √©t√© consomm√©. Jokers restants: $jokers_remaining/$JOKERS_PER_DAY"
  else
    ui_info "Joker non utilis√©."
  fi
}

emergency_cancel_punishments_with_joker() {
  ui_warning "üÉè UTILISATION D'UN JOKER DE SAUVETAGE"
  ui_info "Cette action va annuler TOUTES les p√©nalit√©s en cours."
  echo

  punishment_list_active
  echo

  local jokers_remaining
  jokers_remaining=$(($(config_get_jokers_available) - 1))

  ui_warning "Jokers restants apr√®s cette action: $jokers_remaining/$JOKERS_PER_DAY"
  echo

  if ui_confirm "Utiliser un joker pour annuler toutes les p√©nalit√©s ?"; then
    config_use_joker
    punishment_emergency_stop

    ui_success "üéâ Toutes les p√©nalit√©s ont √©t√© annul√©es gr√¢ce au joker !"
    ui_info "Votre joker a √©t√© consomm√©. Jokers restants: $jokers_remaining/$JOKERS_PER_DAY"
  else
    ui_info "Joker non utilis√©."
  fi
}

emergency_force_cancel_mission() {
  ui_error "üíÄ ABANDON DE MISSION SANS JOKER"
  ui_warning "Cette action va appliquer imm√©diatement les p√©nalit√©s d'√©chec !"
  echo

  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    local activity difficulty
    activity=$(echo "$mission_data" | jq -r '.activity')
    difficulty=$(echo "$mission_data" | jq -r '.difficulty')

    ui_box "üíÄ CONS√âQUENCES DE L'ABANDON" \
      "Mission: $activity ($difficulty)|Statut: Sera marqu√©e comme √âCHOU√âE|P√©nalit√©: Application IMM√âDIATE d'une p√©nalit√©|Dur√©e: 30-60 minutes selon le type||Types possibles:|üîí Verrouillage d'√©cran|üåê Restriction r√©seau|üö´ Blocage de sites|üñºÔ∏è Wallpaper motivationnel|üì¢ Notifications de rappel|üñ±Ô∏è R√©duction sensibilit√© souris||‚ö†Ô∏è CETTE ACTION EST IRR√âVERSIBLE" \
      "#FF0000"

    echo
    ui_error "üí° SUGGESTION: Retournez terminer votre mission ou attendez d'avoir un joker !"
    echo
  fi

  # Double confirmation pour √™tre s√ªr
  if ui_confirm "√ätes-vous ABSOLUMENT s√ªr de vouloir abandonner AVEC p√©nalit√©s ?"; then
    ui_error "‚ö†Ô∏è DERNI√àRE CHANCE ! Voulez-vous vraiment subir une p√©nalit√© ?"

    local final_choice
    final_choice=$(gum choose \
      --cursor="‚û§ " \
      --selected.foreground="#ff0000" \
      "üíÄ OUI, appliquer les p√©nalit√©s maintenant" \
      "üÉè NON, retourner √† ma mission" \
      "üïê ATTENDRE d'avoir un joker (retour menu)")

    case "$final_choice" in
    *"OUI, appliquer"*)
      if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
        local activity difficulty
        activity=$(echo "$mission_data" | jq -r '.activity')
        difficulty=$(echo "$mission_data" | jq -r '.difficulty')

        # Marquer comme √©chou√©e et appliquer p√©nalit√©s
        config_fail_mission
        stats_record_completion "$activity" false "$difficulty"
        config_clear_mission

        ui_error "Mission abandonn√©e et marqu√©e comme √©chou√©e."
        ui_warning "Application imm√©diate des p√©nalit√©s..."

        # Appliquer la p√©nalit√© imm√©diatement
        punishment_apply_random
      fi
      ;;
    *"retourner √† ma mission"*)
      ui_success "Sage d√©cision ! Retournez terminer votre mission."
      ui_info "üí™ Chaque effort compte pour progresser !"
      ;;
    *"ATTENDRE"*)
      ui_info "Vous retournez au menu. Mission toujours active."
      ui_info "üí° Revenez plus tard quand vous aurez r√©cup√©r√© un joker"
      ;;
    esac
  else
    ui_success "Abandon annul√©. Votre mission reste active."
  fi
}

emergency_full_reset_with_confirmation() {
  ui_warning "üîß R√âINITIALISATION COMPL√àTE DU SYST√àME"
  ui_error "‚ö†Ô∏è ATTENTION: Cette action va tout arr√™ter et nettoyer"
  echo

  ui_box "üö® ACTIONS DE LA R√âINITIALISATION" \
    "‚Ä¢ Arr√™ter toutes les missions (SANS p√©nalit√©)|‚Ä¢ Stopper toutes les p√©nalit√©s en cours|‚Ä¢ Nettoyer tous les processus syst√®me|‚Ä¢ Restaurer les param√®tres par d√©faut||‚úÖ LES STATISTIQUES SERONT PR√âSERV√âES|‚ö†Ô∏è Cette action ne consomme PAS de joker" \
    "#FFA500"

  echo
  ui_info "üõ°Ô∏è Cette fonction est r√©serv√©e aux cas de dysfonctionnement grave"
  ui_warning "Elle ne doit PAS √™tre utilis√©e pour √©viter les p√©nalit√©s normales"
  echo

  if ui_confirm "Effectuer une r√©initialisation compl√®te ?"; then
    if ui_confirm "√ätes-vous CERTAIN ? Cette action va tout nettoyer."; then
      echo
      ui_info "D√©but de la r√©initialisation compl√®te..."

      # Arr√™ter mission sans p√©nalit√© (cas exceptionnel)
      config_clear_mission
      ui_success "‚úì Mission arr√™t√©e"

      # Stopper p√©nalit√©s
      punishment_emergency_stop >/dev/null 2>&1
      ui_success "‚úì P√©nalit√©s stopp√©es"

      # Nettoyer processus
      pkill -f "learning.*timer" 2>/dev/null || true
      pkill -f "punishment" 2>/dev/null || true
      ui_success "‚úì Processus nettoy√©s"

      # Nettoyer fichiers temporaires
      rm -f "$CONFIG_DIR"/timer.pid
      rm -f "$CONFIG_DIR"/current_mission.json
      rm -f "$CONFIG_DIR"/timer_status
      rm -f "$CONFIG_DIR"/notifications.log
      ui_success "‚úì Fichiers temporaires supprim√©s"

      echo
      ui_success "üéâ R√©initialisation termin√©e !"
      ui_info "Le syst√®me est maintenant dans un √©tat propre"
    else
      ui_info "R√©initialisation annul√©e"
    fi
  else
    ui_info "R√©initialisation annul√©e"
  fi
}

emergency_system_status() {
  ui_header "√âtat du syst√®me"

  echo
  ui_info "üîç Fichiers de configuration :"
  [[ -f "$CONFIG_DIR/config.json" ]] && echo "  ‚úì config.json pr√©sent" || echo "  ‚ùå config.json manquant"
  [[ -f "$CONFIG_DIR/stats.json" ]] && echo "  ‚úì stats.json pr√©sent" || echo "  ‚ùå stats.json manquant"
  [[ -f "$CONFIG_DIR/current_mission.json" ]] && echo "  ‚ö†Ô∏è Mission active d√©tect√©e" || echo "  ‚úì Aucune mission active"

  echo
  ui_info "üîß Processus actifs :"
  local processes_found=false
  if pgrep -f "learning.*timer" >/dev/null 2>&1; then
    echo "  ‚ö†Ô∏è Timer en cours"
    processes_found=true
  fi
  if pgrep -f "punishment" >/dev/null 2>&1; then
    echo "  ‚ö†Ô∏è P√©nalit√©s actives"
    processes_found=true
  fi
  [[ "$processes_found" == false ]] && echo "  ‚úì Aucun processus actif"

  echo
  ui_info "üíæ Utilisation espace :"
  if [[ -d "$CONFIG_DIR" ]]; then
    local size
    size=$(du -sh "$CONFIG_DIR" 2>/dev/null | cut -f1 || echo "Inconnu")
    echo "  Configuration: $size"
  fi
  
  echo
  ui_wait
}

# ============================================================================
# Informations sur les p√©nalit√©s
# ============================================================================

show_punishment_info() {
  ui_header "üíÄ Informations sur les P√©nalit√©s"

  local min_duration max_duration
  min_duration=$(config_get '.punishment_settings.min_duration')
  max_duration=$(config_get '.punishment_settings.max_duration')

  ui_box "‚ö†Ô∏è P√âNALIT√âS EN CAS D'√âCHEC" \
    "En cas d'√©chec de mission, une p√©nalit√© al√©atoire sera appliqu√©e.|Dur√©e: entre $min_duration et $max_duration minutes||Types de p√©nalit√©s possibles:|üîí Verrouillage d'√©cran temporaire|üåê Restriction du r√©seau|üö´ Blocage de sites distractifs|üñºÔ∏è Changement de fond d'√©cran|üì¢ Notifications de rappel|üñ±Ô∏è R√©duction sensibilit√© souris||Ces p√©nalit√©s sont motivationnelles et temporaires." \
    "#FF6B6B"

  echo
  ui_info "üéØ P√©nalit√©s actuellement actives :"
  punishment_list_active

  echo
  ui_wait
}

# ============================================================================
# Menu des param√®tres
# ============================================================================

show_settings_menu() {
  ui_header "‚öôÔ∏è Param√®tres"

  echo
  local settings_choice
  settings_choice=$(gum choose \
    --cursor="‚û§ " \
    --selected.foreground="#00ff00" \
    --cursor.foreground="#0099ff" \
    "üéØ Modifier les dur√©es par difficult√©" \
    "üíÄ Configuration des p√©nalit√©s" \
    "üîî Param√®tres de notifications" \
    "üîÑ R√©initialiser les statistiques" \
    "üìÅ Voir dossier de configuration" \
    "üì§ Exporter les statistiques" \
    "‚Ü©Ô∏è Retour au menu principal")

  case "$settings_choice" in
  *"dur√©es par difficult√©"*)
    config_modify_durations
    ;;
  *"Configuration des p√©nalit√©s"*)
    show_punishment_settings
    ;;
  *"Param√®tres de notifications"*)
    show_notification_settings
    ;;
  *"R√©initialiser les statistiques"*)
    if ui_confirm "√ätes-vous s√ªr de vouloir r√©initialiser toutes les statistiques ?"; then
      stats_reset
      ui_success "Statistiques r√©initialis√©es"
    fi
    ;;
  *"Voir dossier"*)
    ui_info "Dossier de configuration : $CONFIG_DIR"
    if command -v xdg-open &>/dev/null; then
      if ui_confirm "Ouvrir le dossier dans le gestionnaire de fichiers ?"; then
        xdg-open "$CONFIG_DIR"
      fi
    fi
    ;;
  *"Exporter"*)
    stats_export
    ;;
  *"Retour"*)
    return
    ;;
  esac

  echo
  ui_wait
}

show_punishment_settings() {
  ui_header "Configuration des P√©nalit√©s"

  local enabled min_dur max_dur
  enabled=$(config_get '.punishment_settings.enabled')
  min_dur=$(config_get '.punishment_settings.min_duration')
  max_dur=$(config_get '.punishment_settings.max_duration')

  echo
  ui_info "Configuration actuelle :"
  echo "  P√©nalit√©s: $([ "$enabled" = "true" ] && echo "Activ√©es" || echo "D√©sactiv√©es")"
  echo "  Dur√©e minimum: $min_dur minutes"
  echo "  Dur√©e maximum: $max_dur minutes"
  echo

  local choice
  choice=$(gum choose \
    "$([ "$enabled" = "true" ] && echo "üî¥ D√©sactiver" || echo "üü¢ Activer") les p√©nalit√©s" \
    "üïê Modifier dur√©e minimum" \
    "üïë Modifier dur√©e maximum" \
    "‚Ü©Ô∏è Retour")

  case "$choice" in
  *"D√©sactiver"*)
    config_set '.punishment_settings.enabled' false
    ui_success "P√©nalit√©s d√©sactiv√©es"
    ;;
  *"Activer"*)
    config_set '.punishment_settings.enabled' true
    ui_success "P√©nalit√©s activ√©es"
    ;;
  *"dur√©e minimum"*)
    local new_min
    new_min=$(ui_input "Nouvelle dur√©e minimum (minutes)" "$min_dur")
    if [[ "$new_min" =~ ^[0-9]+$ ]] && [[ $new_min -gt 0 ]]; then
      config_set '.punishment_settings.min_duration' "$new_min"
      ui_success "Dur√©e minimum mise √† jour"
    else
      ui_error "Valeur invalide"
    fi
    ;;
  *"dur√©e maximum"*)
    local new_max
    new_max=$(ui_input "Nouvelle dur√©e maximum (minutes)" "$max_dur")
    if [[ "$new_max" =~ ^[0-9]+$ ]] && [[ $new_max -gt 0 ]]; then
      config_set '.punishment_settings.max_duration' "$new_max"
      ui_success "Dur√©e maximum mise √† jour"
    else
      ui_error "Valeur invalide"
    fi
    ;;
  esac
}

show_notification_settings() {
  ui_header "Param√®tres de Notifications"

  local notif_enabled sound_enabled
  notif_enabled=$(config_get '.notifications.enabled')
  sound_enabled=$(config_get '.notifications.sound')

  echo
  ui_info "Configuration actuelle :"
  echo "  Notifications: $([ "$notif_enabled" = "true" ] && echo "Activ√©es" || echo "D√©sactiv√©es")"
  echo "  Sons d'alerte: $([ "$sound_enabled" = "true" ] && echo "Activ√©s" || echo "D√©sactiv√©s")"
  echo

  local choice
  choice=$(gum choose \
    "$([ "$notif_enabled" = "true" ] && echo "üî¥ D√©sactiver" || echo "üü¢ Activer") les notifications" \
    "$([ "$sound_enabled" = "true" ] && echo "üîá D√©sactiver" || echo "üîä Activer") les sons" \
    "‚Ü©Ô∏è Retour")

  case "$choice" in
  *"D√©sactiver les notifications"*)
    config_set '.notifications.enabled' false
    ui_success "Notifications d√©sactiv√©es"
    ;;
  *"Activer les notifications"*)
    config_set '.notifications.enabled' true
    ui_success "Notifications activ√©es"
    ;;
  *"D√©sactiver les sons"*)
    config_set '.notifications.sound' false
    ui_success "Sons d√©sactiv√©s"
    ;;
  *"Activer les sons"*)
    config_set '.notifications.sound' true
    ui_success "Sons activ√©s"
    ;;
  esac
}

# ============================================================================
# Fonctions utilitaires
# ============================================================================

mission_check_unique_silent() {
  local mission_data
  mission_data=$(config_get_current_mission)

  if [[ "$mission_data" != "null" ]] && [[ -n "$mission_data" ]]; then
    return 1
  fi
  return 0
}

# ============================================================================
# Boucle principale
# ============================================================================

main_loop() {
  while true; do
    ui_header "Learning Challenge Manager"

    # Afficher mission en cours si elle existe
    mission_display_current

    local choice
    if ! choice=$(show_main_menu); then
      ui_warning "S√©lection annul√©e"
      continue
    fi

    handle_main_menu "$choice"

    echo
    sleep 0.5
  done
}

# ============================================================================
# Point d'entr√©e principal
# ============================================================================

main() {
  # V√©rifier le mode admin avec gestion s√©curis√©e des arguments
  local first_arg="${1:-}"
  if [[ "$first_arg" == "--admin" ]] || [[ "$first_arg" == "admin" ]]; then
    admin_mode_main
    exit 0
  fi
  
  check_dependencies
  config_init

  mkdir -p "$CONFIG_DIR" "$BIN_DIR"

  echo
  ui_success "Learning Challenge Manager initialis√©"
  echo

  main_loop
}

# Gestion des signaux
trap 'echo; ui_warning "Interruption d√©tect√©e. Session ferm√©e."; exit 130' INT TERM

# Lancer le programme
main "$@"